name: e2e-macos
on:
  workflow_call:
    inputs:
      os:
        type: string
        required: true
      arch:
        type: string
        required: true
      version:
        type: string
        required: true
      runner-type:
        type: string
        required: true
      test-command:
        type: string
        required: true

permissions:
  # This is required for configure-aws-credentials to request an OIDC JWT ID token to access AWS resources later on.
  # More info: https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#adding-permissions-settings
  id-token: write
  # This is required for actions/checkout
  contents: read

jobs:
  test:
    runs-on:
      [
        "self-hosted",
        "${{ inputs.os }}",
        "${{ inputs.arch }}",
        "${{ inputs.version }}",
        "${{ inputs.runner-type }}",
      ]
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          # We need to get all the git tags to make version injection work. See VERSION in Makefile for more detail.
          fetch-depth: 0
          persist-credentials: false
          submodules: recursive
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version-file: go.mod
          cache: true
      - name: Set output variables
        id: vars
        run: |
          has_creds=${{ (github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name) && github.actor != 'dependabot[bot]' }}
          echo "has_creds=$has_creds" >> $GITHUB_OUTPUT
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        if: ${{ steps.vars.outputs.has_creds == true }}
        with:
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: credhelper-test
          aws-region: ${{ secrets.REGION }}
      - name: Clean up previous files
        run: |
          sudo rm -rf /etc/finch
          sudo rm -rf /var/finch
          sudo rm -rf /var/containerd
          sudo rm -rf /var/soci-snapshotter
          sudo rm -rf ./_output
      - name: Build project
        run: |
          ./contrib/packaging/rpm/build.sh --local
      - name: Install Finch
        run: sudo rpm -i ./_output/runfinch-finch*
      - run: |
          git status
          git clean -f -d
          REGISTRY=${{ steps.vars.outputs.has_creds == true && env.REGISTRY || '' }} make ${{ matrix.test-command }}
