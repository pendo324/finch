// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch/pkg/winutil (interfaces: ElevatedCommand)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// ElevatedCommand is a mock of ElevatedCommand interface.
type ElevatedCommand struct {
	ctrl     *gomock.Controller
	recorder *ElevatedCommandMockRecorder
}

// ElevatedCommandMockRecorder is the mock recorder for ElevatedCommand.
type ElevatedCommandMockRecorder struct {
	mock *ElevatedCommand
}

// NewElevatedCommand creates a new mock instance.
func NewElevatedCommand(ctrl *gomock.Controller) *ElevatedCommand {
	mock := &ElevatedCommand{ctrl: ctrl}
	mock.recorder = &ElevatedCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ElevatedCommand) EXPECT() *ElevatedCommandMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *ElevatedCommand) Run(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *ElevatedCommandMockRecorder) Run(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*ElevatedCommand)(nil).Run), arg0, arg1, arg2)
}
